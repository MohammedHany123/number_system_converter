# -*- coding: utf-8 -*-
"""Number System Converter

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Evjt0eGOcDIcTM_VmUMCeFqBso9V3YKz
"""

#Prepared By:
#Ahmed Samir
#Mohammed Hany
#Loay Medhat

#a function to check that the input is valid in the chosen base
def checkBaseOfNumber(num, base):
    #loop through the number string
    for i in range(len(num)-1, -1, -1):
        #if there is a decimal point in the number, return false to print error message
        if num[i] == '.':
            return False
        #convert the single Unicode character into its integer value
        elif num[i] >= '0' and num[i] <= '9':
            num_digit = ord(num[i]) - ord('0')
        else:
            num_digit = ord(num[i]) - ord('A') + 10
        #if the digit is equal to or bigger than its base return false to present an error message
        if num_digit >= base:
            return False

#a function to convert decimal to binary
def decimalToBinary(num):
    #assign empty string value for result
    result = ""
    #convert the string of the number into integer value to do operations
    num_int = int(num)
    while num_int > 0:
        #get the remainder of dividing the number by 2 to convert to binary form
        num_digit = num_int%2
        result += str(num_digit)
        #do floor division to the number to get the number without remainders
        num_int = num_int//2
    #reverse the result string
    result = result[::-1]
    return result


#a function to convert decimal to octal
def decimalToOctal(num):
    #assign empty string value for result
    result = ""
    #convert the string of the input number into integer value to do the following operations
    num_int = int(num)
    while num_int > 0:
        #get the remainder of dividing the number by 8 to convert to octal form
        num_digit = num_int%8
        result += str(num_digit)
        #do floor division to the number to get the number without remainders
        num_int = num_int//8
    #reverse the result string
    result = result[::-1]
    return result

#a function to convert decimal to hexadecimal
def decimalToHexadecimal(num):
    #assign empty string value for result
    result = ""
    #convert the string of the input number into integer value to do the following operations
    num_int = int(num)
    while num_int > 0:
        #get the remainder of dividing the number by the selected base to convert to
        num_digit = num_int%16
        if num_digit <= 9:
            #add the string value of the digit to result
            result += str(num_digit)
        #if the remainder is not less than or equal to 9 then convert the digit into a special hexadecimal number
        else:
            #get the special integer value of the digit then convert it into Unicode character
            result += chr(ord('A')+num_digit-10)
        #do floor division to the number to get the number without remainders
        num_int = num_int//16
    #reverse the result string
    result = result[::-1]
    return result

#a function to convert binary to decimal
def binaryToDecimal(num):
    result = 0
    #loop through the number string and when finding 1, add value of 2 raised to the power of its length of the string minus the index to result
    for i in range(len(num)-1, -1, -1):
        if num[i] == '1':
            result += 2**(len(num)-1-i)
    return result

#a function to convert binary to octal
def binaryToOctal(num):
    #to convert from binary to octal group each 3-bits then convert to octal
    result = ""
    #make an empty string called intermediate to store each 3 seperate binary numbers within
    intermediate = ""
    #make a variable called counter to count the number of added characters to intermediate
    counter = 0
    #make sure that the string can be grouped to 3-bits
    #if not, fill the string with 0s at the beginning
    if len(num)%3 != 0:
        num = "0"*(3-(len(num)%3)) + num
    #loop through the number string and store each binary character to intermediate string
    for i in range(len(num)-1, -1, -1):
        intermediate += num[i]
        counter += 1
        #when the number of added characters reaches 3, convert them to octal character
        if counter == 3:
            #reverse the intermediate string first
            intermediate = intermediate[::-1]
            digit = 0
            #length of intermediate is always 3; therefore, instead of len(intermediate) replace it with 3
            #convert to octal digit
            for j in range(2, -1, -1):
                if intermediate[j] == '1':
                    digit += 2**(2-j)
            result += str(digit)
            #after converting,  set counter to 0 and intermediate to be empty to repeat the cycle
            counter = 0
            intermediate = ""
    #reverse the result string
    result = result[::-1]
    return result

#a function to convert binary to hexadecimal
def binaryToHexadecimal(num):
    #to convert from binary to hexadecimal group each 4-bits then convert to hexadecimal digit
    result = ""
    #make an empty string called intermediate to store each 4-bits within
    intermediate = ""
    #make a variable called counter to count the number of added characters to intermediate
    counter = 0
    #make sure that the string can be grouped to 3-bits
    #if not, fill the string with 0s at the beginning
    if len(num)%4 != 0:
        num = "0"*(4-(len(num)%4)) + num
    #loop through the number string and store each binary character to intermediate string
    for i in range(len(num)-1, -1, -1):
        intermediate += num[i]
        counter += 1
        #when the number of added characters reaches 4, convert them to hexadecimal digit
        if counter == 4:
            #reverse the intermediate string first
            intermediate = intermediate[::-1]
            digit = 0
            #length of intermediate is always 4; therefore, instead of len(intermediate) replace it with 4
            #convert to hexadecimal digit
            for j in range(3, -1, -1):
                if intermediate[j] == '1':
                    digit += 2**(3-j)
            if digit <= 9:
                result += str(digit)
            else:
                digit = chr(ord('A')+digit-10)
                #add the value of the hexadecimal digit to the result string
                result += digit
            #after converting,  set counter to 0 and intermediate to be empty to repeat the cycle
            counter = 0
            intermediate = ""
    #reverse result string
    result = result[::-1]
    return result

#a function to convert octal to decimal
def octalToDecimal(num):
    result = 0
    #loop through the number from the last digit till the first
    for i in range(len(num)-1, -1, -1):
        #convert each octal digit string to integer value to do operations on it
        num_digit = int(num[i])
        #assign the value of the number to result after multiplying it with 8 raised to the power of length of the string minus its index
        result += num_digit*(8**(len(num)-1-i))
    return result

#a function to convert octal to binary
def octalToBinary(num):
    #to convert octal to binary, take each octal digit and convert it to its binary form
    result = ""
    #loop through the string and convert each digit to its binary form to be in 3-bits representation
    #no need to loop from the end to the beginning in this as it will convert each digit solely
    for i in range(len(num)):
        #make an empty string called binary_num to store each binary representation
        binary_num = ""
        #convert each digit into integer value to do operations on it
        num_int = int(num[i])
        while num_int > 0:
            #add the string value of remainder of dividing the digit with 2 to binary_num string
            binary_num += str(num_int%2)
            #do floor division to get the digit value without remainder
            num_int = num_int//2
        #reverse the binary representation
        binary_num = binary_num[::-1]
        #when the the binary form is in less than 3-bits representation form, add 0s to the beginning of the binary form
        if len(binary_num) < 3:
            binary_num = "0"*(3-len(binary_num))+binary_num
        #add the value of the binary digits to the result string
        result += binary_num
    return result

#a function to convert from octal to hexadecimal
def octalToHexadecimal(num):
    #in order to convert from octal to hexadecimal, binary should be used as an intermediary
    result = ""
    #intermediary string to store the value of binary within
    intermediary = ""
    #counter variable to count the number of digits added to intermediate
    counter = 0
    #convert the octal number into binary form and make sure that the number of bits is divisible by 4; if not, add 0s to the beginning
    binary_num = octalToBinary(num)
    if len(binary_num)%4 != 0:
        binary_num = "0"*(4-(len(binary_num)%4))+binary_num
    #loop through the entire string and convert each 4-bits into its hexadecimal form
    for i in range(len(binary_num)-1, -1, -1):
        #store each binary digit within intermediary
        intermediary += binary_num[i]
        counter += 1
        #when the number of added digits reaches 4, convert into hexadecimal
        if counter == 4:
            #reverse intermediary string
            intermediary = intermediary[::-1]
            result += binaryToHexadecimal(intermediary)
            #after converting, reset the values of counter and intermediary
            counter = 0
            intermediary = ""
    #reverse the result string
    result = result[::-1]
    return result

#a function to convert from hexadecimal to decimal
def hexadecimalToDecimal(num):
    result = 0
    #loop through the number from the last digit till the first
    for i in range(len(num)-1, -1, -1):
        #get the digit of the heaxdecimal form
        if num[i] >= '0' and num[i] <= '9':
            num_digit = int(num[i])
        #if the digit of the number is not represented in numbers, get the integer value of the character then subtract from it the integer value of char 'A' and add 10
        else:
            num_digit = ord(num[i]) - ord('A') + 10
        #multiply the digit by 16 raised to the power of the length of the number-1 minus its index
        result += num_digit*(16**(len(num)-1-i))
    return result

#a function to convert from hexadecimal to binary
def hexadecimalToBinary(num):
    result = ""
    #loop through the entire string and convert each hexadecimal number to binary form of 4-bits
    #no need to loop starting from the end
    for i in range(len(num)):
        #get the value of the hexadecimal digit
        if num[i] >= "0" and num[i] <= "9":
            digit = int(num[i])
        else:
            digit = ord(num[i])-ord('A')+10
        #make a binary_num variable to store the binary form of each digit
        binary_num = ""
        while digit > 0:
            #add the string value of the remainder of dividing the hexadecimal digit with 2
            binary_num += str(digit%2)
            #do floor division to the digit to get the value of the digit without remainder
            digit //= 2
        #reverse the binary_num string
        binary_num = binary_num[::-1]
        #when the binary number is represented by less than 4-bits, add 0s to the left of the number
        if len(binary_num) < 4:
            binary_num = "0"*(4-len(binary_num))+binary_num
        #add the value of the binary number to the result string
        result += binary_num
    return result

#a function to convert from hexadecimal to octal
def hexadecimalToOctal(num):
    #in order to convert from hexadecimal to octal, binary should be used as an intermediary
    result = ""
    #make intermediary variable to store binary digits within
    intermediary = ""
    #counter variable to count the number of added digits
    counter = 0
    #convert the hexadecimal form to binary first
    binary_num = hexadecimalToBinary(num)
    #make sure that the number of bits represented by the number is sufficient to take convert each 3-bits into octal form
    if len(binary_num)%3 != 0:
        binary_num = "0"*(3-(len(binary_num)%3))+binary_num
    #loop through the entire string and convert each seperate 3 binary digits into its octal form
    for i in range(len(binary_num)-1, -1, -1):
        intermediary += binary_num[i]
        counter += 1
        #when the number of added digits reach 3, start converting
        if counter == 3:
            #reverse the intermediary string first
            intermediary = intermediary[::-1]
            #add the octal form of the binary digits to the result string
            result += binaryToOctal(intermediary)
            #after converting, reset the values of counter and intermediary
            counter = 0
            intermediary = ""
    #reverse the result string
    result = result[::-1]
    return result

#Display Menu 1
print("** Numbering System Converter ** \nA) Insert a new number \nB) Exit program")

#Take the input from the user and make a loop to do the process until the user says else
#if the user input a lowercase letter, the program will deal with it the same as uppercase
answer1 = input("Please enter your choice (A/B): ").upper()
if answer1 == "B":
    print("Exiting the program. Goodbye")

#if user input any choice but "B", it will go to make the processes or to tell him to input a valid input
while(answer1 != "B"):

    #If the user chose to insert a new number, the program will function normally
    if answer1 == "A":

        #ask the user to input a number
        num = input("Please insert a number: ")

        #Show Menu 2 and take the input from the user
        #if the user input a lowercase letter, the program will deal with it the same as uppercase
        print("\n** Please select the base you want to convert a number from ** \nA) Decimal \nB) Binary \nC) Octal \nD) Hexadecimal")
        answer2 = input("Please enter your choice (A/B/C/D): ").upper()

        #When the user inputs an invalid input, ask him to repeat until it is valid
        while (answer2 != "A" and answer2 != "B" and answer2 != "C" and answer2 != "D"):
            answer2 = input("Please select a valid choice: ").upper()

        #assign the value of the base with respect to the answer of the user
        if answer2 == "A":
            base = 10
        elif answer2 == "B":
            base = 2
        elif answer2 == "C":
            base = 8
        elif answer2 == "D":
            base = 16

        #check that the number is valid within the chosen base. If not, tell the user to input another.
        while checkBaseOfNumber(num, base) == False:
            num = input(f"Error: {num} is not a valid number in base {base}. Please enter a valid number: ")


        #Show Menu 3 and takes the input value from the user
        #if the user input a lowercase letter, the program will deal with it the same as uppercase
        print("\n** Please select the base you want to convert a number to ** \nA) Decimal \nB) Binary \nC) Octal \nD) Hexadecimal")
        answer3 = input("Please enter your choice (A/B/C/D): ").upper()

        #Check the validity of the user's input
        while (answer3 != "A" and answer3 != "B" and answer3 != "C" and answer3 != "D"):
            answer3 = input("Please select a valid choice: ").upper()

        #Print the result of the converted number according to the selected bases by calling the defined functions
        #if the user chose two same bases, the program will show the entered number
        if answer2 == answer3:
            result = num

        #pass through this if conditions if the user chose to convert from binary
        elif answer2 == "A":
            if answer3 == "B":
                result = decimalToBinary(num)
            elif answer3 == "C":
                result = decimalToOctal(num)
            elif answer3 == "D":
                result = decimalToHexadecimal(num)

        #pass through this if conditions if the user chose to convert from decimal
        elif answer2 == "B":
            if answer3 == "A":
                result = binaryToDecimal(num)
            elif answer3 == "C":
                result = binaryToOctal(num)
            elif answer3 == "D":
                result = binaryToHexadecimal(num)

        #pass through this if conditions if the user chose to convert from octal
        elif answer2 == "C":
            if answer3 == "A":
                result = octalToDecimal(num)
            elif answer3 == "B":
                result = octalToBinary(num)
            elif answer3 == "D":
                result = octalToHexadecimal(num)

        #pass through this if conditions if the user chose to convert from hexadecimal
        elif answer2 == "D":
            if answer3 == "A":
                result = hexadecimalToDecimal(num)
            elif answer3 == "B":
                result = hexadecimalToBinary(num)
            elif answer3 == "C":
                result = hexadecimalToOctal(num)

        #Show the result of converting the number to the user
        print(f"result is: {result}")

    #when user inputs a choice rather than A or B for Menu 1, ask him to input a valid choice and show Menu 1 again
    else:
        print("please select a valid choice")

    #after showing the result, or if the user insert a wrong value rather than A or B at first, show Menu 1 for the user again.
    print("\n** Numbering System Converter ** \nA) Insert a new number \nB) Exit program")
    answer1 = input("Please enter your choice (A/B): ").upper()
    if answer1 == "B":
        print("Exiting the program. Goodbye")